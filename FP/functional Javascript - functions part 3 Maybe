
A common problem in programming is checking for null or undefined (hereafter called “nothing,”
while all other values including 0, [] and false will be called “something”).

This recipe concerns a pattern that is very common: A function fn takes a value as a parameter, and
its behaviour by design is to do nothing if the parameter is nothing:

 const isSomething = (value) =>
  value !== null && value !== void 0;
 
 const checksForSomething = (value) => {
  if (isSomething(value)) { //check null and undefined
    // function's true logic
  }
}

..............................................
maybe monad

const maybe = fn =>
  function(...args) {
    if (args.length === 0) { //check for empty argument
      return;
    } else {
      for (let arg of args) {  // check if "any" argument is null
        if (arg == null) return;
      }
      return fn.apply(this, args);
    }
  };

maybe((a, b, c) => a + b + c)(1, 2, 3)
//=> 6
maybe((a, b, c) => a + b + c)(1, null, 3)
//undefined

function Model () {};

Model.prototype.setSomething = maybe(function (value) {
 this.something = value;
});
If some code ever tries to call model.setSomething with nothing, the operation will be skipped.

........................................................
Once
once is an extremely helpful combinator. It ensures that a function can only be called, well, once.
Here’s the recipe:

const once = (fn) => {
  let done = false;
  return function () {
    return done ? void 0 : ((done = true), fn.apply(this, arguments))
  }
}

const askedOnBlindDate = once(
  () => "sure, why not?"
);

askedOnBlindDate()
//=> 'sure, why not?'

askedOnBlindDate()
//=> undefined




