https://css-tricks.com/debouncing-throttling-explained-examples/
https://stackoverflow.com/questions/25991367/difference-between-throttling-and-debouncing-a-function
http://demo.nimius.net/debounce_throttle/


Debounce and throttle are two similar (but different!) techniques to control 
how many times we allow a function to be executed over time.

keypress on autocomplete form with Ajax request
Why to send Ajax requests to the server every 50ms, when the user is still typing? _.debounce can help us, 
avoiding extra work, and only send the request when the user stops typing.


Throttle
By using _.throttle, we don't allow to our function to execute more than once every X milliseconds.

The main difference between this and debouncing is that throttle guarantees the execution of the function regularly,
at least every X milliseconds.

The same way than debounce, throttle technique is covered by Ben's plugin, underscore.js and lodash.

To put it in simple terms:
  
  Throttling
  Throttling will delay executing a function. It will reduce the notifications of an event that fires multiple times.

  Debouncing
  Debouncing will bunch a series of sequential calls to a function into a single call to that function. It ensures that one
    notification is made for an event that fires multiple times.
    
    If you have a function that gets called a lot - for example when a resize or mouse move event occurs, 
    it can be called a lot of times. If you don't want this behaviour, you can Throttle it so that the function 
    is called at regular intervals. Debouncing will mean it is called at the end (or start) of a bunch of events.
    
    You have a friend named Chatty who likes to talk with you via IM. Assuming when she talks she sends a new message every
    5 seconds, while your IM application icon is bouncing up and down, you can take the...

Naive approach: check every message as long as it arrives. When your app icon bounces, check. It's not the most effective way, 
but you are always up-to-date.
Throttle approach: you check once every 5 minutes (when there are new ones). When new message arrives, if you have checked 
anytime in the last 5 minutes, ignore it. You save your time with this approach, while still in the loop.
Debounce approach: you know Chatty, she breaks down a whole story into pieces, sends them in one message after another. 
You wait until Chatty finishes the whole story: if she stops sending messages for for 5 minutes, you would assume she has 
finished, now you check all.




5 minutes, you would assume she has finished, now you check all.
