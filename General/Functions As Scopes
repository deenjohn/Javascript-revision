
https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md

var a = 2;

(function foo(){ // <-- insert this

	var a = 3;
	console.log( a ); // 3

})(); // <-- and this

console.log( a ); // 


............................................................

Consider this code:

function foo(a) {
	var b = 2;

	// some code

	function bar() {
		// ...
	}

	// more code

	var c = 3;
}


In this snippet, the scope bubble for foo(..) includes identifiers a, b, c and bar. 
It doesn't matter where in the scope a declaration appears, the variable or function belongs 
to the containing scope bubble, regardless. We'll explore how exactly that works in the next chapter.

bar(..) has its own scope bubble. So does the global scope, which has just one identifier attached to it: foo.

Because a, b, c, and bar all belong to the scope bubble of foo(..), they are not accessible outside of foo(..). 
That is, the following code would all result in ReferenceError errors, as the identifiers are not available to the global scope:

bar(); // fails

console.log( a, b, c ); // all 3 fail
However, all these identifiers (a, b, c, foo, and bar) are accessible inside of foo(..), 
and indeed also available inside of bar(..) (assuming there are no shadow identifier declarations inside bar(..)).





